import random
class TicTacToe:
    def __init__(self):
        self.board = [' ' for _ in range(9)]  
        self.current_winner = None  
    def print_board(self):
        for row in [self.board[i*3:(i+1)*3] for i in range(3)]:
            print('| ' + ' | '.join(row) + ' |')    
    def print_board_nums(self):
        number_board = [[str(i) for i in range(j*3, (j+1)*3)] for j in range(3)]
        for row in number_board:
            print('| ' + ' | '.join(row) + ' |')   
    def available_moves(self):
        return [i for i, spot in enumerate(self.board) if spot == ' '] 
    def empty_squares(self):
        return ' ' in self.board
    def num_empty_squares(self):
        return self.board.count(' ') 
    def make_move(self, square, letter):
        if self.board[square] == ' ':
            self.board[square] = letter
            if self.winner(square, letter):
                self.current_winner = letter
            return True
        return False  
    def winner(self, square, letter):
        row_ind = square // 3
        row = self.board[row_ind*3:(row_ind+1)*3]
        if all([spot == letter for spot in row]):
            return True
        col_ind = square % 3
        column = [self.board[col_ind+i*3] for i in range(3)]
        if all([spot == letter for spot in column]):
            return True
        if square % 2 == 0:  
            diagonal1 = [self.board[i] for i in [0, 4, 8]]  
            if all([spot == letter for spot in diagonal1]):
                return True
            diagonal2 = [self.board[i] for i in [2, 4, 6]]  
            if all([spot == letter for spot in diagonal2]):
                return True
        return False
def minimax(position, depth, maximizing_player, alpha=-float('inf'), beta=float('inf')):
    if position.current_winner == 'X':  
        return {'score': 1 * (depth + 1)}
    elif position.current_winner == 'O':  
        return {'score': -1 * (depth + 1)}
    elif not position.empty_squares():  
        return {'score': 0}  
    if maximizing_player:  
        best = {'score': -float('inf')}
        for possible_move in position.available_moves():
            position.make_move(possible_move, 'X')
            sim_score = minimax(position, depth + 1, False, alpha, beta)            
            position.board[possible_move] = ' '
            position.current_winner = None            
            sim_score['move'] = possible_move            
            if sim_score['score'] > best['score']:
                best = sim_score            
            alpha = max(alpha, best['score'])
            if beta <= alpha:
                break               
        return best
    else:  
        best = {'score': float('inf')}
        for possible_move in position.available_moves():
            position.make_move(possible_move, 'O')
            sim_score = minimax(position, depth + 1, True, alpha, beta)
            position.board[possible_move] = ' '
            position.current_winner = None            
            sim_score['move'] = possible_move           
            if sim_score['score'] < best['score']:
                best = sim_score            
            beta = min(beta, best['score'])
            if beta <= alpha:
                break               
        return best
def get_bot_move(game):
    if len(game.available_moves()) == 9:
        return random.choice(game.available_moves())
    result = minimax(game, 0, True)
    return result['move']
def play():
    game = TicTacToe()
    human_letter = 'O'
    bot_letter = 'X'  
    print("Добро пожаловать в Крестики-нолики!")
    print("Вы играете за 'O', бот играет за 'X'")
    print("Номера клеток:")
    game.print_board_nums()
    print("\nНачинаем игру!\n")
    first_move = human_letter     
    print(f"Первым ходит: игрок (O)")   
    game.print_board()   
    while game.empty_squares():
        if first_move == human_letter:
            try:
                human_move = int(input("\nВаш ход (0-8): "))
                if human_move not in game.available_moves():
                    print("Некорректный ход! Выберите свободную клетку (0-8).")
                    continue                
                game.make_move(human_move, human_letter)                
                if game.current_winner:
                    game.print_board()
                    print("Поздравляем! Вы выиграли!")
                    return
                if game.empty_squares():
                    print("\nХод бота...")
                    bot_move = get_bot_move(game)
                    game.make_move(bot_move, bot_letter)
                    print(f"Бот сходил на клетку {bot_move}")                   
                    if game.current_winner:
                        game.print_board()
                        print("Бот выиграл!")
                        return           
            except ValueError:
                print("Пожалуйста, введите число от 0 до 8.")
                continue
        else:
            print("\nХод бота...")
            bot_move = get_bot_move(game)
            game.make_move(bot_move, bot_letter)
            print(f"Бот сходил на клетку {bot_move}")            
            if game.current_winner:
                game.print_board()
                print(" Бот выиграл!")
                return            
            if game.empty_squares():
                try:
                    game.print_board()
                    human_move = int(input("\nВаш ход (0-8): "))
                    if human_move not in game.available_moves():
                        print("Некорректный ход! Выберите свободную клетку (0-8).")
                        continue                   
                    game.make_move(human_move, human_letter)                   
                    if game.current_winner:
                        game.print_board()
                        print("Поздравляем! Вы выиграли!")
                        return               
                except ValueError:
                    print("Пожалуйста, введите число от 0 до 8.")
                    continue       
        game.print_board()
        first_move = human_letter      
    game.print_board()
    print("Ничья!")
if __name__ == "__main__":
    play()
